{
  "name": "websocket-multiplexer",
  "version": "0.0.6",
  "description": "Multiple virtual channels over a web socket / SockJS connection",
  "main": "src/multiplexer.js",
  "repository": "",
  "keywords": [
    "websocket",
    "SockJS",
    "multiplexer",
    "multiplex"
  ],
  "author": {
    "name": "Manuel Stofer"
  },
  "license": "MIT",
  "readme": "# Websocket multiplexer\n\nWebsocket multiplexer, emulates virtual channels over web socket or SockJS.\n\nIts different to the [SockJS multiplexer](https://github.com/sockjs/websocket-multiplex) in some ways:\n\n- Client / Server agnostic.\n- Anonymous channels.\n- Open new channels at any time. No need to specify them ahead.\n- CommonJS, use it with component, browserify or as node.js module.\n\n\n## Installation\n\n```bash\ncomponent install manuelstofer/websocket-multiplexer\n```\n\n```bash\nnpm install websocket-multiplexer\n```\n\n```Javascript\nvar Multiplexer = require('websocket-multiplexer');\n```\n\n\n### API\n\nWith named channels:\n\n```Javascript\nvar multiplexer = new Multiplexer({ socket: websocket }),\n    example = multiplexer.channel('example');\n\nexample.addEventListener('message', function (evt) {\n    console.log(evt.data);\n});\n\nexample.addEventListener('close', function (evt) {\n\n});\n```\n\n\nCreate anonymous channels:\n\n```Javascript\nvar multiplexer = new Multiplexer({ socket: websocket }),\n    channel = multiplexer.channel();\n\nchannel.send('hello');\n```\n\n\nListen for anonymous channels:\n\n```Javascript\nvar multiplexer = new Multiplexer({ socket: websocket });\n\nmultiplexer.addEventListener('channel', function (evt) {\n    var channel = evt.channel;\n\n    channel.addEventListener('message', function (evt) {\n        console.log(evt.data);\n    });\n});\n```\n\nThere are also some examples for node.js + [ws](https://github.com/einaros/ws) in examples/ws\n\n\n### Multiplexer\n\n```webidl\ninterface Multiplexer {\n  attribute Function onchannel;\n\n  // create a channel\n  void channel(optional String channel_id);\n  void close();\n};\nMultiplexer implements EventTarget;\n```\n\n### Channel\n\n```webidl\ninterface Channel {\n  attribute String name;\n  attribute Function onmessage;\n  attribute Function onclose;\n  void send(in DOMString data);\n  void close();\n};\nChannel implements EventTarget;\n```\n",
  "readmeFilename": "readme.md",
  "_id": "websocket-multiplexer@0.0.6",
  "_from": "websocket-multiplexer@"
}
